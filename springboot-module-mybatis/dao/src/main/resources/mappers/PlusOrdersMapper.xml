<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guonl.dao.PlusOrdersMapper">
  <resultMap id="BaseResultMap" type="com.guonl.model.PlusOrders">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="openid" jdbcType="VARCHAR" property="openid" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
    <result column="order_status" jdbcType="VARCHAR" property="orderStatus" />
    <result column="plus_gift_id" jdbcType="INTEGER" property="plusGiftId" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_by_name" jdbcType="VARCHAR" property="createByName" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_by_name" jdbcType="VARCHAR" property="updateByName" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="is_del" jdbcType="BIT" property="isDel" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, username, mobile, openid, order_no, order_status, plus_gift_id, remark, create_by, 
    create_by_name, created_at, update_by, update_by_name, updated_at, is_del
  </sql>
  <select id="selectByExample" parameterType="com.guonl.model.PlusOrdersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from plus_orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from plus_orders
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from plus_orders
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guonl.model.PlusOrdersExample">
    delete from plus_orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guonl.model.PlusOrders">
    insert into plus_orders (id, username, mobile, 
      openid, order_no, order_status, 
      plus_gift_id, remark, create_by, 
      create_by_name, created_at, update_by, 
      update_by_name, updated_at, is_del
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, 
      #{openid,jdbcType=VARCHAR}, #{orderNo,jdbcType=VARCHAR}, #{orderStatus,jdbcType=VARCHAR}, 
      #{plusGiftId,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, 
      #{createByName,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, 
      #{updateByName,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP}, #{isDel,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into plus_orders
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.username != null">
            username,
          </if>
          <if test="record.mobile != null">
            mobile,
          </if>
          <if test="record.openid != null">
            openid,
          </if>
          <if test="record.orderNo != null">
            order_no,
          </if>
          <if test="record.orderStatus != null">
            order_status,
          </if>
          <if test="record.plusGiftId != null">
            plus_gift_id,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.createByName != null">
            create_by_name,
          </if>
          <if test="record.createdAt != null">
            created_at,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.updateByName != null">
            update_by_name,
          </if>
          <if test="record.updatedAt != null">
            updated_at,
          </if>
          <if test="record.isDel != null">
            is_del,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.username != null">
            #{record.username,jdbcType=VARCHAR},
          </if>
          <if test="record.mobile != null">
            #{record.mobile,jdbcType=VARCHAR},
          </if>
          <if test="record.openid != null">
            #{record.openid,jdbcType=VARCHAR},
          </if>
          <if test="record.orderNo != null">
            #{record.orderNo,jdbcType=VARCHAR},
          </if>
          <if test="record.orderStatus != null">
            #{record.orderStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.plusGiftId != null">
            #{record.plusGiftId,jdbcType=INTEGER},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.guonl.model.PlusOrdersExample" resultType="java.lang.Long">
    select count(*) from plus_orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update plus_orders
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.username != null">
            username = #{record.username,jdbcType=VARCHAR},
          </if>
          <if test="record.mobile != null">
            mobile = #{record.mobile,jdbcType=VARCHAR},
          </if>
          <if test="record.openid != null">
            openid = #{record.openid,jdbcType=VARCHAR},
          </if>
          <if test="record.orderNo != null">
            order_no = #{record.orderNo,jdbcType=VARCHAR},
          </if>
          <if test="record.orderStatus != null">
            order_status = #{record.orderStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.plusGiftId != null">
            plus_gift_id = #{record.plusGiftId,jdbcType=INTEGER},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            create_by_name = #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            created_at = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            update_by_name = #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            is_del = #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update plus_orders
    set id = #{record.id,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      openid = #{record.openid,jdbcType=VARCHAR},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      order_status = #{record.orderStatus,jdbcType=VARCHAR},
      plus_gift_id = #{record.plusGiftId,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_by_name = #{record.createByName,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_by_name = #{record.updateByName,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      is_del = #{record.isDel,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update plus_orders
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.username != null">
            username = #{record.username,jdbcType=VARCHAR},
          </if>
          <if test="record.mobile != null">
            mobile = #{record.mobile,jdbcType=VARCHAR},
          </if>
          <if test="record.openid != null">
            openid = #{record.openid,jdbcType=VARCHAR},
          </if>
          <if test="record.orderNo != null">
            order_no = #{record.orderNo,jdbcType=VARCHAR},
          </if>
          <if test="record.orderStatus != null">
            order_status = #{record.orderStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.plusGiftId != null">
            plus_gift_id = #{record.plusGiftId,jdbcType=INTEGER},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            create_by_name = #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            created_at = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            update_by_name = #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            is_del = #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guonl.model.PlusOrders">
    update plus_orders
    set username = #{username,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      openid = #{openid,jdbcType=VARCHAR},
      order_no = #{orderNo,jdbcType=VARCHAR},
      order_status = #{orderStatus,jdbcType=VARCHAR},
      plus_gift_id = #{plusGiftId,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_by_name = #{createByName,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_by_name = #{updateByName,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      is_del = #{isDel,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.guonl.model.PlusOrdersExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from plus_orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into plus_orders
    (id, username, mobile, openid, order_no, order_status, plus_gift_id, remark, create_by, 
      create_by_name, created_at, update_by, update_by_name, updated_at, is_del)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.username,jdbcType=VARCHAR}, #{item.mobile,jdbcType=VARCHAR}, 
        #{item.openid,jdbcType=VARCHAR}, #{item.orderNo,jdbcType=VARCHAR}, #{item.orderStatus,jdbcType=VARCHAR}, 
        #{item.plusGiftId,jdbcType=INTEGER}, #{item.remark,jdbcType=VARCHAR}, #{item.createBy,jdbcType=VARCHAR}, 
        #{item.createByName,jdbcType=VARCHAR}, #{item.createdAt,jdbcType=TIMESTAMP}, #{item.updateBy,jdbcType=VARCHAR}, 
        #{item.updateByName,jdbcType=VARCHAR}, #{item.updatedAt,jdbcType=TIMESTAMP}, #{item.isDel,jdbcType=BIT}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into plus_orders (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'username'.toString() == column.value">
          #{item.username,jdbcType=VARCHAR}
        </if>
        <if test="'mobile'.toString() == column.value">
          #{item.mobile,jdbcType=VARCHAR}
        </if>
        <if test="'openid'.toString() == column.value">
          #{item.openid,jdbcType=VARCHAR}
        </if>
        <if test="'order_no'.toString() == column.value">
          #{item.orderNo,jdbcType=VARCHAR}
        </if>
        <if test="'order_status'.toString() == column.value">
          #{item.orderStatus,jdbcType=VARCHAR}
        </if>
        <if test="'plus_gift_id'.toString() == column.value">
          #{item.plusGiftId,jdbcType=INTEGER}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=VARCHAR}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=VARCHAR}
        </if>
        <if test="'create_by_name'.toString() == column.value">
          #{item.createByName,jdbcType=VARCHAR}
        </if>
        <if test="'created_at'.toString() == column.value">
          #{item.createdAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_by_name'.toString() == column.value">
          #{item.updateByName,jdbcType=VARCHAR}
        </if>
        <if test="'updated_at'.toString() == column.value">
          #{item.updatedAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'is_del'.toString() == column.value">
          #{item.isDel,jdbcType=BIT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>