<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guonl.dao.PlusGiftMapper">
  <resultMap id="BaseResultMap" type="com.guonl.model.PlusGift">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="gift_name" jdbcType="VARCHAR" property="giftName" />
    <result column="gift_img_url" jdbcType="VARCHAR" property="giftImgUrl" />
    <result column="gift_status" jdbcType="INTEGER" property="giftStatus" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="remaining" jdbcType="INTEGER" property="remaining" />
    <result column="receive" jdbcType="INTEGER" property="receive" />
    <result column="gift_model" jdbcType="VARCHAR" property="giftModel" />
    <result column="standard_price" jdbcType="DECIMAL" property="standardPrice" />
    <result column="delivery_area_id" jdbcType="INTEGER" property="deliveryAreaId" />
    <result column="detail_img_url" jdbcType="VARCHAR" property="detailImgUrl" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_by_name" jdbcType="VARCHAR" property="createByName" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_by_name" jdbcType="VARCHAR" property="updateByName" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="is_del" jdbcType="BIT" property="isDel" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gift_name, gift_img_url, gift_status, stock, remaining, receive, gift_model, 
    standard_price, delivery_area_id, detail_img_url, create_by, create_by_name, created_at, 
    update_by, update_by_name, updated_at, is_del
  </sql>
  <select id="selectByExample" parameterType="com.guonl.model.PlusGiftExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from plus_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from plus_gift
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from plus_gift
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guonl.model.PlusGiftExample">
    delete from plus_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guonl.model.PlusGift">
    insert into plus_gift (id, gift_name, gift_img_url, 
      gift_status, stock, remaining, 
      receive, gift_model, standard_price, 
      delivery_area_id, detail_img_url, create_by, 
      create_by_name, created_at, update_by, 
      update_by_name, updated_at, is_del
      )
    values (#{id,jdbcType=INTEGER}, #{giftName,jdbcType=VARCHAR}, #{giftImgUrl,jdbcType=VARCHAR}, 
      #{giftStatus,jdbcType=INTEGER}, #{stock,jdbcType=INTEGER}, #{remaining,jdbcType=INTEGER}, 
      #{receive,jdbcType=INTEGER}, #{giftModel,jdbcType=VARCHAR}, #{standardPrice,jdbcType=DECIMAL}, 
      #{deliveryAreaId,jdbcType=INTEGER}, #{detailImgUrl,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, 
      #{createByName,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, 
      #{updateByName,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP}, #{isDel,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into plus_gift
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.giftName != null">
            gift_name,
          </if>
          <if test="record.giftImgUrl != null">
            gift_img_url,
          </if>
          <if test="record.giftStatus != null">
            gift_status,
          </if>
          <if test="record.stock != null">
            stock,
          </if>
          <if test="record.remaining != null">
            remaining,
          </if>
          <if test="record.receive != null">
            receive,
          </if>
          <if test="record.giftModel != null">
            gift_model,
          </if>
          <if test="record.standardPrice != null">
            standard_price,
          </if>
          <if test="record.deliveryAreaId != null">
            delivery_area_id,
          </if>
          <if test="record.detailImgUrl != null">
            detail_img_url,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.createByName != null">
            create_by_name,
          </if>
          <if test="record.createdAt != null">
            created_at,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.updateByName != null">
            update_by_name,
          </if>
          <if test="record.updatedAt != null">
            updated_at,
          </if>
          <if test="record.isDel != null">
            is_del,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.giftName != null">
            #{record.giftName,jdbcType=VARCHAR},
          </if>
          <if test="record.giftImgUrl != null">
            #{record.giftImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.giftStatus != null">
            #{record.giftStatus,jdbcType=INTEGER},
          </if>
          <if test="record.stock != null">
            #{record.stock,jdbcType=INTEGER},
          </if>
          <if test="record.remaining != null">
            #{record.remaining,jdbcType=INTEGER},
          </if>
          <if test="record.receive != null">
            #{record.receive,jdbcType=INTEGER},
          </if>
          <if test="record.giftModel != null">
            #{record.giftModel,jdbcType=VARCHAR},
          </if>
          <if test="record.standardPrice != null">
            #{record.standardPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.deliveryAreaId != null">
            #{record.deliveryAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.detailImgUrl != null">
            #{record.detailImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.guonl.model.PlusGiftExample" resultType="java.lang.Long">
    select count(*) from plus_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update plus_gift
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.giftName != null">
            gift_name = #{record.giftName,jdbcType=VARCHAR},
          </if>
          <if test="record.giftImgUrl != null">
            gift_img_url = #{record.giftImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.giftStatus != null">
            gift_status = #{record.giftStatus,jdbcType=INTEGER},
          </if>
          <if test="record.stock != null">
            stock = #{record.stock,jdbcType=INTEGER},
          </if>
          <if test="record.remaining != null">
            remaining = #{record.remaining,jdbcType=INTEGER},
          </if>
          <if test="record.receive != null">
            receive = #{record.receive,jdbcType=INTEGER},
          </if>
          <if test="record.giftModel != null">
            gift_model = #{record.giftModel,jdbcType=VARCHAR},
          </if>
          <if test="record.standardPrice != null">
            standard_price = #{record.standardPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.deliveryAreaId != null">
            delivery_area_id = #{record.deliveryAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.detailImgUrl != null">
            detail_img_url = #{record.detailImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            create_by_name = #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            created_at = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            update_by_name = #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            is_del = #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update plus_gift
    set id = #{record.id,jdbcType=INTEGER},
      gift_name = #{record.giftName,jdbcType=VARCHAR},
      gift_img_url = #{record.giftImgUrl,jdbcType=VARCHAR},
      gift_status = #{record.giftStatus,jdbcType=INTEGER},
      stock = #{record.stock,jdbcType=INTEGER},
      remaining = #{record.remaining,jdbcType=INTEGER},
      receive = #{record.receive,jdbcType=INTEGER},
      gift_model = #{record.giftModel,jdbcType=VARCHAR},
      standard_price = #{record.standardPrice,jdbcType=DECIMAL},
      delivery_area_id = #{record.deliveryAreaId,jdbcType=INTEGER},
      detail_img_url = #{record.detailImgUrl,jdbcType=VARCHAR},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_by_name = #{record.createByName,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_by_name = #{record.updateByName,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      is_del = #{record.isDel,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update plus_gift
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.giftName != null">
            gift_name = #{record.giftName,jdbcType=VARCHAR},
          </if>
          <if test="record.giftImgUrl != null">
            gift_img_url = #{record.giftImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.giftStatus != null">
            gift_status = #{record.giftStatus,jdbcType=INTEGER},
          </if>
          <if test="record.stock != null">
            stock = #{record.stock,jdbcType=INTEGER},
          </if>
          <if test="record.remaining != null">
            remaining = #{record.remaining,jdbcType=INTEGER},
          </if>
          <if test="record.receive != null">
            receive = #{record.receive,jdbcType=INTEGER},
          </if>
          <if test="record.giftModel != null">
            gift_model = #{record.giftModel,jdbcType=VARCHAR},
          </if>
          <if test="record.standardPrice != null">
            standard_price = #{record.standardPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.deliveryAreaId != null">
            delivery_area_id = #{record.deliveryAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.detailImgUrl != null">
            detail_img_url = #{record.detailImgUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=VARCHAR},
          </if>
          <if test="record.createByName != null">
            create_by_name = #{record.createByName,jdbcType=VARCHAR},
          </if>
          <if test="record.createdAt != null">
            created_at = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=VARCHAR},
          </if>
          <if test="record.updateByName != null">
            update_by_name = #{record.updateByName,jdbcType=VARCHAR},
          </if>
          <if test="record.updatedAt != null">
            updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.isDel != null">
            is_del = #{record.isDel,jdbcType=BIT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guonl.model.PlusGift">
    update plus_gift
    set gift_name = #{giftName,jdbcType=VARCHAR},
      gift_img_url = #{giftImgUrl,jdbcType=VARCHAR},
      gift_status = #{giftStatus,jdbcType=INTEGER},
      stock = #{stock,jdbcType=INTEGER},
      remaining = #{remaining,jdbcType=INTEGER},
      receive = #{receive,jdbcType=INTEGER},
      gift_model = #{giftModel,jdbcType=VARCHAR},
      standard_price = #{standardPrice,jdbcType=DECIMAL},
      delivery_area_id = #{deliveryAreaId,jdbcType=INTEGER},
      detail_img_url = #{detailImgUrl,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_by_name = #{createByName,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_by_name = #{updateByName,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      is_del = #{isDel,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.guonl.model.PlusGiftExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from plus_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into plus_gift
    (id, gift_name, gift_img_url, gift_status, stock, remaining, receive, gift_model, 
      standard_price, delivery_area_id, detail_img_url, create_by, create_by_name, created_at, 
      update_by, update_by_name, updated_at, is_del)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.giftName,jdbcType=VARCHAR}, #{item.giftImgUrl,jdbcType=VARCHAR}, 
        #{item.giftStatus,jdbcType=INTEGER}, #{item.stock,jdbcType=INTEGER}, #{item.remaining,jdbcType=INTEGER}, 
        #{item.receive,jdbcType=INTEGER}, #{item.giftModel,jdbcType=VARCHAR}, #{item.standardPrice,jdbcType=DECIMAL}, 
        #{item.deliveryAreaId,jdbcType=INTEGER}, #{item.detailImgUrl,jdbcType=VARCHAR}, 
        #{item.createBy,jdbcType=VARCHAR}, #{item.createByName,jdbcType=VARCHAR}, #{item.createdAt,jdbcType=TIMESTAMP}, 
        #{item.updateBy,jdbcType=VARCHAR}, #{item.updateByName,jdbcType=VARCHAR}, #{item.updatedAt,jdbcType=TIMESTAMP}, 
        #{item.isDel,jdbcType=BIT})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into plus_gift (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'gift_name'.toString() == column.value">
          #{item.giftName,jdbcType=VARCHAR}
        </if>
        <if test="'gift_img_url'.toString() == column.value">
          #{item.giftImgUrl,jdbcType=VARCHAR}
        </if>
        <if test="'gift_status'.toString() == column.value">
          #{item.giftStatus,jdbcType=INTEGER}
        </if>
        <if test="'stock'.toString() == column.value">
          #{item.stock,jdbcType=INTEGER}
        </if>
        <if test="'remaining'.toString() == column.value">
          #{item.remaining,jdbcType=INTEGER}
        </if>
        <if test="'receive'.toString() == column.value">
          #{item.receive,jdbcType=INTEGER}
        </if>
        <if test="'gift_model'.toString() == column.value">
          #{item.giftModel,jdbcType=VARCHAR}
        </if>
        <if test="'standard_price'.toString() == column.value">
          #{item.standardPrice,jdbcType=DECIMAL}
        </if>
        <if test="'delivery_area_id'.toString() == column.value">
          #{item.deliveryAreaId,jdbcType=INTEGER}
        </if>
        <if test="'detail_img_url'.toString() == column.value">
          #{item.detailImgUrl,jdbcType=VARCHAR}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=VARCHAR}
        </if>
        <if test="'create_by_name'.toString() == column.value">
          #{item.createByName,jdbcType=VARCHAR}
        </if>
        <if test="'created_at'.toString() == column.value">
          #{item.createdAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=VARCHAR}
        </if>
        <if test="'update_by_name'.toString() == column.value">
          #{item.updateByName,jdbcType=VARCHAR}
        </if>
        <if test="'updated_at'.toString() == column.value">
          #{item.updatedAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'is_del'.toString() == column.value">
          #{item.isDel,jdbcType=BIT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>